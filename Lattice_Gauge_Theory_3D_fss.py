from __future__ import division
import numpy as np
import fssa
import matplotlib.pyplot as plt

L = np.array([10, 15, 20, 25])

K = np.array([0.7,0.7034482758620689,0.7068965517241379,0.7103448275862069,0.7137931034482758,0.7172413793103448,0.7206896551724138,0.7241379310344828,0.7275862068965517,0.7310344827586207,0.7344827586206897,0.7379310344827587,0.7413793103448276,0.7448275862068966,0.7482758620689656,0.7517241379310344,0.7551724137931034,0.7586206896551724,0.7620689655172413,0.7655172413793103,0.7689655172413793,0.7724137931034483,0.7758620689655172,0.7793103448275862,0.7827586206896552,0.7862068965517242,0.7896551724137931,0.7931034482758621,0.7965517241379311,0.8])

T = [1/k for k in K]

# L=10 ... 50 x 6000
C_10 = np.array([2.909875110925419,2.97231827900732,  3.040257873823302, 3.1682611998193146,3.1650199963054546,3.5081026973940506,3.7688670168165888,3.861293439241109,4.324189236122945, 5.210203140074459, 5.714716616215203, 6.149478958473382, 6.475713599207546, 6.008511951242656, 5.257491891476454, 3.92058193915847,  3.3808379898674503,2.2735160493562048,2.290982240573393, 1.8374538626726786,1.4574383265538848,1.3038365645597307,1.1014083432357962,1.0789624268094729,0.925907086864289, 0.8864423343854572,0.8219286456837026,0.7479662398472446,0.6929645571994455,0.6632586849301241])
C_10_s = np.array([0.05280349812337238,0.054957098539121854,0.05602112468389673,0.058107960464418865,0.060446250746453226,0.06592220106902015,0.07378433120074646,0.07587033408445312,0.0829494695381838,0.1000029019726645,0.10128959606167239,0.09907717316078561,0.09685265889584524,0.09515096398181526,0.09214456862325805,0.0750504085334566,0.07061399333936526,0.05250603205320802,0.05716208216449663,0.0455508214861617,0.03537375802016561,0.029657659021073077,0.027661715730772626,0.024814625559493785,0.018821345120329534,0.018953626370892547,0.017911502706292458,0.015220132155211804,0.015997529683392072,0.013753435476721993])

# L=15 ... 100 x 3000
C_15 = np.array([2.9673441320286824,  2.9610768101207285,  3.018910538276221,   3.0668662038351577,  3.3577562780892944,  3.2137938572833966,  3.390405694988304,   3.537554954896037,   3.939053545040373,   3.577821647350309,   3.989867532723263,   4.493908485237352,   4.820568414297454,   5.992232814104965,   6.830664689283811,   7.325127990809868,   5.688236809827402,   3.2835054795404357,  2.3191893210578796,  1.9613664735962775,  1.4531432779502402,  1.3161591866371631,  1.172659311868867,   0.9933065062906629,  0.9186204714677508,  0.8201629837865659,  0.8013915277021173,  0.7556952897353376,  0.7162566890254081,  0.6572711184984382     ])
C_15_s = np.array([0.07862621799091223,0.07612330508534122,0.07732276103837675,0.07752913040665624,0.08629340881589168,0.08426061205148462,0.09055939704267604,0.09018216515853353,0.1045482892669737,0.09486912180953368,0.10297055139613558,0.1248250496717567,0.1410526102474017,0.15816515660117134,0.16668236456055768,0.15708741053566372,0.15194193991026086,0.10462599543456538,0.07172607977867639,0.06757395683303555,0.04636389446302484,0.04210289212366128,0.03552120017179934,0.0279279671795002,0.025394203708320625,0.020972221551718708,0.021606945524246208,0.021492169628967363,0.019204345644063033,0.01816461746813481])

# L=20 ... 100 x 3000
C_20 = np.array([2.864171253377517,   2.967528228429499,   3.1125294637567023,  3.201157064260625,   3.2166502969070296,  3.408042735298596,   3.430582599782176,   3.5147207093123014,  3.623185363831503,   3.814882720254592,   3.918086150101503,   4.135752871942079,   4.447210508233366,   4.28756340077148,    5.417130060731669,   7.621317709417061,   8.628593323559498,   5.1581848553870335,  2.5671161768292046,  1.7761601670354017,  1.3876162559815772,  1.3001242815611023,  1.1267648377258594,  0.9957067792045657,  0.9323258602513957,  0.861023842474064,   0.8076871165573184,  0.7237796043294599,  0.6936722039442219,  0.6577251926477498])
C_20_s = np.array([0.07481947014292982,   0.07740749227474639,   0.0802031207766417,    0.08448585392543984,   0.08074438265187761,   0.08385881508398318,   0.08881659609408761,   0.09011672663987891,   0.09498382303951658,   0.09895372214741621,   0.09964898814441335,   0.10645310738642941,   0.11811458259856693,   0.11116210130112403,   0.1521343266915381,    0.19352281272109192,   0.18194253863221468,   0.13744902277283777,   0.08549953402992189,   0.04949674317243407,   0.039785224660584775,  0.03476121686847747,   0.031041041856256987,  0.026306578633444797,  0.025458171563136435,  0.021441774234938045,  0.02116653836789144,   0.01927364827715632,   0.018487799803580455,  0.016442501548634445])

# L=25 ... 150 x 2000
C_25 = np.array([2.9038447847845847,       2.8332246776746253,       3.1253907565857837,       3.2636022367447293,       3.162717826377335,        3.2670466646741096,       3.6176462416759585,       3.400235806253838,        3.78557887303864,         3.7454577342571893,       3.896791185158567,        4.472179680217066,        4.489264586771277,        4.647445312416798,        5.296075103216881,        5.842196362095103,        6.841830859598472,        5.921556654349584,        2.8373988819023332,       2.154562001831114,        1.56898274815016,         1.2470448396440976,       1.1893319355598726,       1.059858347872013,        0.988481455209949,        0.9149651680265477,       0.7937584712284749,       0.7496439736481441,       0.792173961864706,        0.7024919882975538          ])
C_25_s = np.array([0.08792529986513864,  0.08788050134716151,  0.0978787213657044,   0.10551654944993717,  0.09925887365379601,  0.10600495149355947,  0.1109356442811513,   0.10655953677777048,  0.12537114930976465,  0.11934164276651829,  0.12343014947896232,  0.14274934474653614,  0.13953697366097984,  0.14374214302889252,  0.16757657800826176,  0.19449785204604922,  0.2163788069159961,   0.1946684065829216,   0.11334603497804703,  0.09177224568090617,  0.051388829548414,    0.041113389886204874, 0.04036704192759104,  0.03423137688002852,  0.03617087137094282,  0.031124907838416618, 0.027709130134457763, 0.02428358147554096,  0.03002188250443112,  0.02426320791764072     ])

T = np.flip(T)
C_10 = np.flip(C_10)
C_15 = np.flip(C_15)
C_20 = np.flip(C_20) 
C_25 = np.flip(C_25)

C_10_s = np.flip(C_10_s) * 3
C_15_s = np.flip(C_15_s) * 3
C_20_s = np.flip(C_20_s) * 3
C_25_s = np.flip(C_25_s) * 3

L_C = np.zeros((len(L), len(C_10)))
for i in range(len(C_10)):
   L_C[0][i] = C_10[i] 
   L_C[1][i] = C_15[i]
   L_C[2][i] = C_20[i]
   L_C[3][i] = C_25[i]

d_L_C = np.zeros((len(L), len(C_10)))
for i in range(len(C_10)):
   d_L_C[0][i] = C_10_s[i]
   d_L_C[1][i] = C_15_s[i]
   d_L_C[2][i] = C_20_s[i]
   d_L_C[3][i] = C_25_s[i]


C_reg = 9999
f_reg = 9999

C_reg_array = np.linspace(3,5,10000)
for C_0 in C_reg_array:
   scaled_data = fssa.scaledata(L, T, L_C + C_0, d_L_C, 1/0.761, 0.62997, 0.11008)
   f = fssa.quality(scaled_data.x, scaled_data.y, scaled_data.dy)

   if f < f_reg:
      C_reg = C_0
      f_reg = f
      print (C_reg, f_reg)


ret = fssa.autoscale(L, T, L_C + C_reg, d_L_C, 1/0.761, 0.62997, 0.11008)
print ("C_reg:", C_reg)
print ("rho:", ret.rho, ret.drho)
print ("nu:", ret.nu, ret.dnu)
print ("zeta:", ret.zeta, ret.dzeta)
print ("f:", ret.fun)


data = fssa.scaledata(L, T, L_C + C_reg, d_L_C, ret.rho, ret.nu, ret.zeta)
#data = fssa.scaledata(L, T, L_C + C_reg, d_L_C, 4.51, 0.63, 0.11)


heat_capacity = plt.figure()
plt.xlabel("T")
plt.ylabel("specific heat")
plt.title("3D LGT model, specific heat")
plt.errorbar(T, C_10, yerr=C_10_s, fmt="o", color="red",    label="L = 10")
plt.errorbar(T, C_15, yerr=C_15_s, fmt="^", color="gold", label="L = 15")
plt.errorbar(T, C_20, yerr=C_20_s, fmt="s", color="green",   label="L = 20")
plt.errorbar(T, C_25, yerr=C_25_s, fmt="v", color="blue",  label="L = 25")
plt.legend()
plt.show()
heat_capacity.savefig("3D_LGT_model_heat_capacity.png")


heat_capacity = plt.figure()
plt.xlabel("x")
plt.ylabel("scaled specific heat")
plt.title("3D LGT model, specific heat, data collapse")
plt.errorbar(data.x[0], data.y[0], yerr=data.dy[0], fmt="o", color="red",      label="L = 10")
plt.errorbar(data.x[1], data.y[1], yerr=data.dy[1], fmt="^", color="gold",   label="L = 15")
plt.errorbar(data.x[2], data.y[2], yerr=data.dy[2], fmt="s", color="green",     label="L = 20")
plt.errorbar(data.x[3], data.y[3], yerr=data.dy[3], fmt="v", color="blue",    label="L = 25")
plt.legend()
plt.show()
heat_capacity.savefig("3D_LGT_model_heat_capacity_scaled.png")


"""
fig, ax = plt.subplots()
ax.plot(
    data.x.T, data.y.T,
    '.',
)
plt.show()
"""



