from __future__ import division
import numpy as np
import fssa
import matplotlib.pyplot as plt

L = np.array([10, 15, 20, 25])

K = np.array([
0.2,0.201724138,0.203448276,0.205172414,0.206896552,0.20862069,0.210344828,0.212068966,0.213793103,0.215517241,0.217241379,0.218965517,0.220689655,0.222413793,0.224137931,0.225862069,0.227586207,0.229310345,0.231034483,0.232758621,0.234482759,0.236206897,0.237931034,0.239655172,0.24137931,0.243103448,0.244827586,0.246551724,0.248275862,0.25])

T = [1/k for k in K]

# L=5
C_5 = np.array([0.47901306621403905,0.5154231922085527,0.5352074603954016,0.5920526860402333,0.6292565430405178,0.6775628484029056,0.7184687427811539,0.7922357045425797,0.8462364780792984,0.9037605994449552,0.9752891273816848,1.0300933364731282,1.0757739772163208,1.1474568343673732,1.1953684619998892,1.2393219426050002,1.2754446291313832,1.323790882268842,1.3581724508503275,1.3812501720295989,1.4083233155374812,1.4031159557886703,1.4067252763254763,1.3996014435810484,1.3817732061527959,1.3713105811760498,1.3614380832820085,1.343110800217309,1.308050477643208,1.2623414965439712])
C_5_s = np.array([0.0047479407130589036,0.004971613077990321,0.00505805737117061,0.005526340345949038,0.0057563459657265816,0.006103231287056757,0.006238169716587708,0.006807782994198362,0.00703068758644653,0.007196900680929706,0.007591729509418691,0.007785545835987782,0.007842755383496517,0.00820031549583563,0.008384714403826671,0.008584704178878232,0.008735135308562176,0.009060674833354954,0.009221984479631733,0.009468205300024641,0.009689262230310903,0.009745510401878718,0.010044021186720264,0.010266262178701637,0.010205984748260212,0.010354133276587464,0.010504233242232047,0.01061666029800976,0.010552493908364925,0.01032805973262463])

# L=10
C_10 = np.array([0.29471917373061884,0.32055235186950665,0.3499061696935968,0.363693755635619,0.413465532354601,0.4626649217137977,0.5280523677362161,0.5777390876607665,0.670994915768568,0.8274740470074925,0.9665682698163488,     1.1655295846767764,     1.4343645747306715,     1.6370166879083516,     1.8482957213312285,     1.9073655384167458,     2.0011641128926074,     1.9385481735382963,     1.832199931512184,      1.76209294382639,       1.7391981153262634,     1.582917492910775,      1.551562302786862,      1.4825186015311491,     1.4296241460060588,     1.3647545115421134,     1.3498042993367283,     1.3040024456194137,     1.2579195429219259,     1.2225277151322775     ])
C_10_s = np.array([0.004486747189386561,0.004905829265231885,0.005543783867698441,0.005655296710347477,0.006732181978321065,0.007659460440315307,0.008918535432743277,0.009268772640587442,0.011216767519639173,0.013893872972093636,0.015623506022237327,0.01745068436028649,0.02028436837119164,0.021488091491666656,0.023217007707435858,0.02450234636923484,0.02594197498117901,0.02607861221908222,0.025322732565510594,0.025030486120275905,0.02483715483816893,0.022797622257745495,0.022963122957129198,0.02141290314614613,0.020543289694016417,0.019943285188671788,0.01885497111134484,0.0182945757467952,0.018220718593612715,0.01697275123015844])

# L=15
C_15 = np.array([0.2813918258934826,0.3020932950989972,0.30545542618759364,0.3523539491466965,0.3623362902371416,0.4033210117113441,0.43232320249801415,0.47182192949622204,0.5341458579711436,0.6412372703194592,0.8069807581313222,1.0964634927736385,1.4864854756600256,1.9701128406522257,2.2613851488465966,2.2803535116015707,2.0357907529292074,1.9162449315291858,1.8122449834465864,1.6738514446435988,1.6629971514947217,1.5880696443836728,1.5799908255773025,1.5066637348874827,1.4662900837471833,1.3681140751806473,1.3527179749183706,1.2750706301070411,1.2562270817530368,1.2267041922040434])
C_15_s = np.array([0.005789214846443599,     0.006135711317653619,     0.0061334992072847976,    0.007129192133032013,     0.00735678823484918,      0.008428783614759577,     0.009035483936120324,     0.010149158916468922,     0.012455770490420683,     0.014096260103383529,     0.018463331127826794,     0.02460620472369437,      0.03196558214836143,      0.03671161829729316,      0.0407447987935412,       0.044205749402175545,     0.04137303784176696,      0.03779475444185365,      0.037860242008068125,     0.033584352162118955,     0.03338300945089256,      0.031216915351664095,     0.031324647482200575,     0.030363732559469093,     0.028488929118614822,     0.026556233924249394,     0.027477531019369592,     0.02507353587781631,      0.02528874453382765,      0.024224938155329643     ])

# L=20
C_20 = np.array([0.29790684473493606,0.2965708496355418,0.30158995431734853,0.32951337399860026,0.3669615855964358,0.3840780401603928,0.4075882606264272,0.43529563152733103,0.49536993349933234,0.5468917139905844,0.7327832556816579,0.9329678051631636,1.5764188750481922,2.2569528724047516,2.4977512604293652,2.2657194525034576,2.0700454146239164,1.9528628013725569,1.8649915125454672,1.7156752247260443,1.6898020065635062,1.6402637607921042,1.588123321788726,1.5107985974602534,1.4315363014602809,1.4412031118548494,1.34098717690414,1.308520506792578,1.262642827654231,1.2435667827198476])
C_20_s = np.array([0.008015928902161375,0.007827578595070352,0.00793597521495839,0.008611016963456532,0.00992770712986846,0.009636245644564018,0.011154181257707414,0.011185401728129572,0.012916491844628116,0.01456545647574581,0.02271691158295583,0.028956436947202756,0.042173813038281556,0.052485953538615876,0.062439593339098154,0.06206837257279157,0.055562418751072984,0.05215965076528427,0.04758054989552879,0.04504139094628597,0.04293569500460382,0.041475618082832226,0.04100440305893568,0.03902073027021459,0.03659952670654063,0.03646875483426672,0.03488208672963304,0.03312928008727103,0.03241023203561027,0.03202461716511561])

# L=25
C_25 = np.array([0.2897659106641576,0.2942126819703024,0.31983318898175056,0.342602498060635,0.35785311013875604,0.3809618740507939,0.4100876785213436,0.42719900548343925,0.47961951889965165,0.5525878100572894,0.6669111641613563,0.8509875403855655,1.4284012581727816,2.4245810858388133,2.591375092737212,2.1170767222441937,2.1974474195743334,1.9460266626916407,1.847515186737331,1.7520380628982433,1.682007907952589,1.5970090720734582,1.4743805053569043,1.4553979953112246,1.4145048412765278,1.3694508114985473,1.3766353454836184,1.2965277870562202,1.2248677832975925,1.2460446706742372])
C_25_s = np.array([0.0074457555319079926,  0.0076077506703301,     0.008316395042875506,   0.009062672335405152,   0.009284369701899407,   0.009725412983746625,   0.0107275288307091,     0.01107445878306388,    0.013247141368519852,   0.014191735938665037,   0.017041883502047023,   0.0237293054145344,     0.03892948700799832,    0.057978619736063115,   0.06718792175304493,    0.05270959398117962,    0.05720492765806427,    0.050414898681881315,   0.0479199888110676,     0.044799148799934574,   0.04288628683979723,    0.04870653578118678,    0.037600050991311376,   0.03621897998609039,    0.03683608656070325,    0.03545981143486357,    0.0355966337545489,     0.03272021571547529,    0.03177407502885579,    0.032725143940727904      ])

T = np.flip(T)
C_5 = np.flip(C_5)
C_10 = np.flip(C_10)
C_15 = np.flip(C_15)
C_20 = np.flip(C_20) 
C_25 = np.flip(C_25)

C_5_s = np.flip(C_5_s) * 3
C_10_s = np.flip(C_10_s) * 3
C_15_s = np.flip(C_15_s) * 3
C_20_s = np.flip(C_20_s) * 3
C_25_s = np.flip(C_25_s) * 3

L_C = np.zeros((len(L), len(C_5)))
for i in range(len(C_5)):
   L_C[0][i] = C_10[i] 
   L_C[1][i] = C_15[i]
   L_C[2][i] = C_20[i]
   L_C[3][i] = C_25[i]

d_L_C = np.zeros((len(L), len(C_5)))
for i in range(len(C_5)):
   d_L_C[0][i] = C_10_s[i]
   d_L_C[1][i] = C_15_s[i]
   d_L_C[2][i] = C_20_s[i]
   d_L_C[3][i] = C_25_s[i]

C_reg = 9999
f_reg = 9999

C_reg_array = np.linspace(0,3,10000)
for C_0 in C_reg_array:
   scaled_data = fssa.scaledata(L, T, L_C + C_0, d_L_C, 1/0.2216, 0.62997, 0.11008)
   f = fssa.quality(scaled_data.x, scaled_data.y, scaled_data.dy)

   if f < f_reg:
      C_reg = C_0
      f_reg = f
      print (C_reg, f_reg)


ret = fssa.autoscale(L, T, L_C + C_reg, d_L_C, 1/0.2216, 0.62997, 0.11008)
print ("C_reg:", C_reg)
print ("rho:", ret.rho, ret.drho)
print ("nu:", ret.nu, ret.dnu)
print ("zeta:", ret.zeta, ret.dzeta)
print ("f:", ret.fun)


data = fssa.scaledata(L, T, L_C + C_reg, d_L_C, ret.rho, ret.nu, ret.zeta)
#data = fssa.scaledata(L, T, L_C + C_reg, d_L_C, 4.51, 0.63, 0.11)


heat_capacity = plt.figure()
plt.xlabel("T")
plt.ylabel("specific heat")
plt.title("3D Ising model, specific heat")
plt.errorbar(T, C_10, yerr=C_10_s, fmt="o", color="red",    label="L = 10")
plt.errorbar(T, C_15, yerr=C_15_s, fmt="^", color="gold", label="L = 15")
plt.errorbar(T, C_20, yerr=C_20_s, fmt="s", color="green",   label="L = 20")
plt.errorbar(T, C_25, yerr=C_25_s, fmt="v", color="blue",  label="L = 25")
plt.legend()
plt.show()
heat_capacity.savefig("3D_Ising_model_heat_capacity.png")

heat_capacity = plt.figure()
plt.xlabel("x")
plt.ylabel("scaled specific heat")
plt.title("3D Ising model, specific heat, data collapse")
plt.errorbar(data.x[0], data.y[0], yerr=data.dy[0], fmt="o", color="red",      label="L = 10")
plt.errorbar(data.x[1], data.y[1], yerr=data.dy[1], fmt="^", color="gold",   label="L = 15")
plt.errorbar(data.x[2], data.y[2], yerr=data.dy[2], fmt="s", color="green",     label="L = 20")
plt.errorbar(data.x[3], data.y[3], yerr=data.dy[3], fmt="v", color="blue",    label="L = 25")
plt.legend()
plt.show()
heat_capacity.savefig("3D_Ising_model_heat_capacity_scaled.png")

"""
fig, ax = plt.subplots()
ax.plot(
    data.x.T, data.y.T,
    '.',
)
plt.show()
"""


